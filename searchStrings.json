[{"content":"%%%金句(2024.03.12)%%%1%%% 金句(2024.03.12) <!--more-->  网络   Section 1   得罪父母要被挨打，得罪这年轻的危险社会还不如丢掉性命。   造谣只需要错误的说出1句话，想要取得真相却需要224339句话。   麦哲伦说: “古人认为资本主义有自由却是禽兽，这值得思考”。   人类仍留存禽兽的本性，天性脆弱的人类会被凶猛的捕食者猎杀。   没有绝对的正义和公路，壮烈的牺牲同时也失去了苟延残喘的旗帜。   在追求利益的道路上，人们经常违背自己的本心，就可化身为只会嚎叫的动物。他们不需要脸。   假如我们一直憎恨他，憎恨他，憎恨小行星，善良就会越来越少。是时候驱逐这份黑暗的憎恨了。   Section 2   在社会眼中，无情的资本不会在意你的灵魂，更不会为你的死而感到惋惜！   毫无疑问，这篇翻译内容包含了日本人绝大多数野性的需求。   当梦醒来后，我看到了无尽的残杀与背叛。   如果政客的信仰被更新，就不会生长武力，平民就不会哭泣，斗争更不会升级！   那天夜晚，我被困在货舱里，看到很多腐烂的尸体的手臂正拿着钱。   我被囚禁在了这里，中国人逃不出的思想迷宫，牢笼是无尽的。   我很清楚，随着时间的流逝，强壮的精神也会变得麻木，我不会投降。   虽然我的头被砍了，但我的精神变得灿烂了。   我看向天空，所有大笑的人变成了僵尸。   Section 3   雪白的皮肤下刺入这倒退文明的伤口，单片的花朵的凋零下映透了病态的忠心。   他支起一张已经被压力压的喷血的脸，用手强行将嘴强行扯出一张笑容。   当疯狂的暴风雪散去后，我看到再次被粉饰过的黑暗，我开始唾弃永生之人。   这个世界本该属于联合的人，即使我们在天上和地上看不到任何发出光明的人。   天上走过的是云朵，流逝的是精神和魂魄。   我在世界上看到了孤独的伤口，因为堕落而死掉的人，只有死去的灵魂在永存。%%%Tue Mar 12 2024","href":"/read/17dyw6YeR5Y+lMjAyNDAzMTI=/","atitle":"金句(2024.03.12)"},{"content":"%%%WebJS - 滚动目录实现%%%4%%% WebJS - 滚动目录实现 <!--more-->   JavaScript   参数 markdown_content: 文章容器(Node)   需要更改的地方 `toc`: 挂载目录的容器   Code  ```js function TOC(markdown_content) {  let toc = document.querySelector(\"toc\");  if(!toc) return;  let tocList = markdown_content.querySelectorAll(\"h1, h2, h3, h4, h5, h6\");  let liList = [];  tocList.forEach((v) => {  let pid = '_' + Date.now().toString(36) + Math.random().toString(36).replace(/[\\s\\S]{3}/, '');  v.id = pid;  const H = v.nodeName[1];  let li = document.createElement('li');  li.classList.add(`li-${H}`);  li.setAttribute('pid', pid);  li.textContent = v.textContent;  li.addEventListener(\"click\", () => {  window.scrollBy({ top: v.getBoundingClientRect().y, behavior: \"smooth\" });  });  toc.appendChild(li);  liList.push(li);  })  let tocArr = Array.from(tocList);  const removeClass = () => {  liList.forEach(v => v.classList.remove(\"active\"));  }  const update = () => {  for (let i = 0; i < tocArr.length; i++) {  let v = tocArr[i];  let rect = v.getBoundingClientRect();  let top = rect.top + rect.height;  if (top > 0) {  removeClass();  let li = liList[i];  li.classList.add('active');  /  这两句代码用来实现目录左侧的进度条，需要搭配CSS实现，删除没有影响。  CSS见下文  toc.style.setProperty('--g-start',li.offsetTop+li.getBoundingClientRect().height-5+'px');  toc.style.setProperty('--g-end',li.offsetTop+li.getBoundingClientRect().height+5+'px');  /  break;  }  }  }  let ticking = false;  window.addEventListener(\"scroll\", () => {  if (!ticking) {  window.requestAnimationFrame(() => {  update();  ticking = false;  })  }  ticking = true;  });  update(); } ```   CSS   需要更改的地方 `--brand-color`: 高亮颜色 `--radius`: 圆角   Code  ```css toc{  margin: 0;  list-style: none;  padding: 0.75rem;  border-radius: 0.75rem;  border: 1px solid transparent; } toc::before{  position: absolute;  top: 0;  left: 0;  width: .1rem;  height: 100%;  content: '';  background: linear-gradient(var(--brand-color) var(--g-start),transparent var(--g-end)); } toc>li{  cursor: pointer;  padding: 0.125rem 0.25rem;  border-radius: var(--radius);  transition: color .2s ease-in-out,background .2s ease-in-out; } toc>.li-1{  font-size: larger; } toc>.li-2{  font-size: large;  padding-left: 0.65rem; } toc>.li-3{  padding-left: 1.25rem; } toc>li:hover{  background: var(--brand-color-75);  color: fff; } toc>li.active{  color: var(--brand-color); } toc>li.active:hover{  background-color: var(--brand-color-25); } ```%%%Mon Mar 04 2024","href":"/read/4c76V2ViSlPmu5rliqjnm67lvZXlrp7njrA=/","atitle":"WebJS - 滚动目录实现"},{"content":"%%%Git 常用命令大全%%%5%%% Git 常用命令大全  原作者: Runnob DGd [原文](https://www.runoob.com/note/56524)  ![CheatSheet](https://www.runoob.com/wp-content/uploads/2015/02/011500266295799.jpg)  ```bash git init  初始化本地git仓库（创建新仓库） git config --global user.name \"xxx\"  配置用户名 git config --global user.email \"xxx@xxx.com\"  配置邮件 git config --global color.ui true  git status等命令自动着色 git config --global color.status auto git config --global color.diff auto git config --global color.branch auto git config --global color.interactive auto git config --global --unset http.proxy  remove proxy configuration on git git clone git+ssh://git@192.168.53.168/VT.git  clone远程仓库 git status  查看当前版本状态（是否修改） git add xyz  添加xyz文件至index git add .  增加当前子目录下所有更改过的文件至index git commit -m 'xxx'  提交 git commit --amend -m 'xxx'  合并上一次提交（用于反复修改） git commit -am 'xxx'  将add和commit合为一步 git rm xxx  删除index中的文件 git rm -r   递归删除 git log  显示提交日志 git log -1  显示1行日志 -n为n行 git log -5 git log --stat  显示提交日志及相关变动文件 git log -p -m git show dfb02e6e4f2f7b573337763e5c0013802e392818  显示某个提交的详细内容 git show dfb02  可只用commitid的前几位 git show HEAD  显示HEAD提交日志 git show HEAD^  显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本 git tag  显示已存在的tag git tag -a v2.0 -m 'xxx'  增加v2.0的tag git show v2.0  显示v2.0的日志及详细内容 git log v2.0  显示v2.0的日志 git diff  显示所有未添加至index的变更 git diff --cached  显示所有已添加index但还未commit的变更 git diff HEAD^  比较与上一个版本的差异 git diff HEAD -- ./lib  比较与HEAD版本lib目录的差异 git diff origin/master..master  比较远程分支master上有本地分支master上没有的 git diff origin/master..master --stat  只显示差异的文件，不显示具体内容 git remote add origin git+ssh://git@192.168.53.168/VT.git  增加远程定义（用于push/pull/fetch） git branch  显示本地分支 git branch --contains 50089  显示包含提交50089的分支 git branch -a  显示所有分支 git branch -r  显示所有原创分支 git branch --merged  显示所有已合并到当前分支的分支 git branch --no-merged  显示所有未合并到当前分支的分支 git branch -m master master_copy  本地分支改名 git checkout -b master_copy  从当前分支创建新分支master_copy并检出 git checkout -b master master_copy  上面的完整版 git checkout features/performance  检出已存在的features/performance分支 git checkout --track hotfixes/BJVEP933  检出远程分支hotfixes/BJVEP933并创建本地跟踪分支 git checkout v2.0  检出版本v2.0 git checkout -b devel origin/develop  从远程分支develop创建新本地分支devel并检出 git checkout -- README  检出head版本的README文件（可用于修改错误回退） git merge origin/master  合并远程master分支至当前分支 git cherry-pick ff44785404a8e  合并提交ff44785404a8e的修改 git push origin master  将当前分支push到远程master分支 git push origin :hotfixes/BJVEP933  删除远程仓库的hotfixes/BJVEP933分支 git push --tags  把所有tag推送到远程仓库 git fetch  获取所有远程分支（不更新本地分支，另需merge） git fetch --prune  获取所有原创分支并清除服务器上已删掉的分支 git pull origin master  获取远程分支master并merge到当前分支 git mv README README2  重命名文件README为README2 git reset --hard HEAD  将当前版本重置为HEAD（通常用于merge失败回退） git rebase git branch -d hotfixes/BJVEP933  删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支） git branch -D hotfixes/BJVEP933  强制删除分支hotfixes/BJVEP933 git ls-files  列出git index包含的文件 git show-branch  图示当前分支历史 git show-branch --all  图示所有分支历史 git whatchanged  显示提交历史对应的文件修改 git revert dfb02e6e4f2f7b573337763e5c0013802e392818  撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818 git ls-tree HEAD  内部命令：显示某个git对象 git rev-parse v2.0  内部命令：显示某个ref对于的SHA1 HASH git reflog  显示所有提交，包括孤立节点 git show HEAD@{5} git show master@{yesterday}  显示master分支昨天的状态 git log --pretty=format:'%h %s' --graph  图示提交日志 git show HEAD~3 git show -s --pretty=raw 2be7fcb476 git stash  暂存当前修改，将所有至为HEAD状态 git stash list  查看所有暂存 git stash show -p stash@{0}  参考第一次暂存 git stash apply stash@{0}  应用第一次暂存 git grep \"delete from\"  文件中搜索文本“delete from” git grep -e 'define' --and -e SORT_DIRENT git gc git fsck ```%%%Mon Mar 04 2024","href":"/read/4c76R2l05bi455So5ZG95Luk5aSn5YWo/","atitle":"Git 常用命令大全"},{"content":"%%%Nexo Beta 1.0.3%%%9%%%<!--more-->   CHANGELOG b1.0.3(n2.2.5-1) 注解   Changed  `CODE[0]` is now `FED` > 彩蛋更新，我从 Arch Linux (AR) 换到 Fedora Linux 40 (FED) 了，纯 Fedora， 非 Fedora Workstation 等特别版  {`Tag`,`Category`}.included_article is now renamed to included > 把这两个抽象出了一个父类，顺便把 `included_article` 改成 `included` 了   New  structure tree, better organizing > 你会在根目录下发现一个 `structure.tree` 文件，里面描述了 Nexo 源代码的文件树  `init` module completed (call using `npm run init`) > 百年大计终于完成了（乐），这个东西鸽了好几个版本了  `text_process.js` for processing text haha > `word_count` 抽出来了  `descriptive_class.js` for descriptive class like `Category` `Tag` `License` `Datz` > 描述性类，这些东西都对于核心功能没什么用，所以抽出来了  i18n fallback file support (`i18n.default.json`) > 写 `Wacal` 的时候突发奇想，这个东西开发的原本意图是简写，比如 `Wacal.layout[post.pug]`里面写的`@CC_PRIVATE`   Removed  `classes.js` (GARBAGE)  `file_class.js` (GARBAGE) > 这俩的东西基本都挪到 `descriptive_class` 和 `struct` 了%%%Tue Mar 19 2024","href":"/read/17dz3TmV4b0JldGExMDM=/","atitle":"Nexo Beta 1.0.3"},{"content":"%%%Linux下Git配置%%%6%%%<!--more-->   Linux 下 Git 配置   账户  ```bash git config --global user.name $USER_NAME git config --global user.email $USER_EMAIL ```   SSH  ```bash ssh-keygen -t ed25519 -C $USER_EMAIL ```  默认公钥位置： `$HOME/.ssh/id_ed25519.pub`%%%Sat Feb 24 2024","href":"/read/17dwgTGludXjkuItHaXTphY3nva4=/","atitle":"Linux下Git配置"},{"content":"%%%What is Nexo%%%7%%%<!--more-->   What is Nexo   Nexo的起源  本来就是个自己写的小工具，处于自己也不知道的什么原因不喜欢 Hexo， 然后就开始自己写这个东西了。   1.0  一开始的代码还是挺乱的（现在也是），使用的还是require语法，功能也是自己要就加，还只用的EJS模板。 后来接触到PUG和JSX了，给这俩都加了点支持，JSX最后还是给删了，感觉还不到时候，可以用EJS替代。  1.0时期主要就那么几个东西，读取->转换->生成，其他文件复制什么的都没搞。   GEN 2.0  2.0更新弄了个新API和1.0以前的代码分开，然后就逐渐在这条路上越走越远了，一直到2.0.3，代码里还残留着1.0的东西，以及一些无用、错误的代码。 2.0什么功能都开始搞了，简单的一些小功能（比如静态i18n、预生成搜索之类的）能写就写，给写主题等事提供尽可能多的便利。   RSS、Sitemap  这俩东西本来都没想着弄，后来看着别的博客都有这么个玩意也就跟着搞了搞，代码简单，搞起来也就是能用。   CHANGELOG  本来也不想搞这玩意，太费事。 后来又不想写COMMIT MSG，还是整这东西了。 changelog也就随便写写，代码搞上头了自己写的什么功能都能忘。   PLAN 3.0  3.0是个大更新，新API、新结构等等，估计时间还很长。 3.0可能要放弃EJS或者作为可选 %%%Mon Feb 26 2024","href":"/read/17dwiV2hhdGlzTmV4bw==/","atitle":"What is Nexo"},{"content":"%%%Nexo 2.1.0 发布了%%%8%%%<!--more-->   CHANGELOG 2.1.0 注解   Removed   CRITICAL GARBAGE CODE build pages > 这个是说从1.x就盘踞在app/里的那个`BF_with`等等一大坨，大概有两百行的代码，后面单独抽出来一个`builder.js`重构了，一百多行就解决了，主要还是因为历史遗留，垃圾太多。   `Configuration` class (use `Collection` instead) > `Collection`类是新加进来的，为了解决原生`object`用起来太麻烦，直接把`getProperty`等等加在里面了，后面可能会用`GObject`代替，把原来 base_fn 都挪到`GObject`里写成 static 方法了，顺便还加了点功能。   New   `Collection` class > 上面写了   `Layout` class > 给主题布局模板抽象出来的，里面塞了一个`Correspond`和一些给定的东西，这个东西私有成员挺多，基本都是只读（上面那个`Collection`有个`append`可以加东西，但是不能丢东西，而且`append`也没多少用处）。   `Cache` class (replace `Cachable`) > 这个主要是`Cachable`看着不顺眼。   `Correspond` (struct) class > 一个结构类，就两个成员`from`和`to`，都是可读可写。   `GObject` (unused, for developing) > 准备开发的基类，现在还没多少东西，学JS把几个方便的函数放里面了。   Changed   short path is now default > 简洁   renamed functions in sitemap module > 简洁，也是为了规范   get_property now supports array as the second argument > 懒，提前写好免得报错，虽然会有一点慢，但`node`那个速度就别指望优化什么的了，或许用`rust` `c++`还有的一搏   Fixed   update rss module for new feature   update sitemap module for new feature   Planned   use new `Collection` for all functions and remove old codes > 代码里还有好多用`object`的，抽空都换了   move old builder to new place > `path`太乱了   Prepared   constants for short code (unused) > 见 [constants.js](https://github.com/0xarch/nexo/src/core/constants.js) ，一些和Nexo有关系的放这   config template for init and auto using (unused) > 见 [config_template.js](https://github.com/0xarch/nexo/src/core/config_template.js) ，就是fallback用的%%%Tue Feb 27 2024","href":"/read/17dwjTmV4bzIxMOWPkeW4g+S6hg==/","atitle":"Nexo 2.1.0 发布了"},{"content":"%%%原神:娜维娅理论值计算%%%3%%%<!--more-->   倍率计算  带0/1/5裁断(满被动),10/13级e/q,2命炮击计入倍率.   主要伤害  这里不计算减抗(4命)/加成(杯子)/增伤(裁断/叠6层)/爆伤(6命).  (10/13级)e有710%/839%倍率,再按3层11枚全中x200%算, 6层额外提升15% x3 =45%,  2命额外召唤一次(10/13级)q的意大利炮,倍率为77.7%/91.7%  主要伤害:   0命 710% x200% =1420% 岩伤   1/2命 710% x200% +77.7% =1497.7% 岩伤   3/4命 839% x200% +77.7% =1755.7% 岩伤   5/6命 839% x200% + 91.7% =1769.7% 岩伤   流涌之刃   0~2命  64.8% 岩伤   3~6命  76.5% 岩伤   增伤  6层e叠满算,0~6命e加成都是45%.   无裁断  1 +45% =145%   精1裁断  1 +45% +36% =181%   精5裁断  1 +45% +72% =217%   减抗  理论上不应该把这个算进倍率  0\\~3命0%, 4~6命额外减抗 20%.   加成  理论上不应该把这个算进倍率  按46.6%杯子, 1 +46.6% = 146.6%   爆伤  按标准爆伤130%计算,6命额外135%.  非6命: 1 +130% =230% 6命: 230% +135% =365%   结果  |命座|裁断|纯倍率|计入增益|计入增益/暴击| |---|---|---|---|---| |0|0|1484.8%|~3156%|~7259%| |0|1|1484.8%|~3940%|~9062%| |0|5|1484.8%|~4723%|~10864%| |2|0|1562.5%|~3321%|~7639%| |2|1|1562.5%|~4146%|~9536%| |2|5|1562.5%|~4970%|~11433%| |4|0|1832.2%|~3895%|~8958%| |4|1|1832.2%|~4862%|~11182%| |4|5|1832.2%|~5829%|~13406%| |6|0|1846.2%|~3924%|~14324%| |6|1|1846.2%|~4899%|~17881%| |6|5|1846.2%|~5873%|~21437%|  2万倍率,厉害捏%%%Mon Jan 01 2024","href":"/read/4c6j5Y6f56We5aic57u05aiF55CG6K665YC86K6h566X/","atitle":"原神:娜维娅理论值计算"}]